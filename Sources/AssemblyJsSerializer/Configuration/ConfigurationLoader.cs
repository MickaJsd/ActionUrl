using AssemblyJsSerializer.Error;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Threading.Tasks;

namespace AssemblyJsSerializer.Configuration
{
    internal class ConfigurationLoader : NestedErrorHandler
    {
        private const string DEFAULT_FIELD_FORMAT = "'{0}.{1}'";
        private const string CAUTION_HEADER =
@"//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated.
//
//    Manual changes to this file may cause unexpected behavior in your application.  
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";
        const string JSON_CONFIG_FILE = "AssemblyJsSerializer.json";


        public ConfigurationSettings Create(string json)
        {
            ConfigurationSettings config = GetDefault();
            JsonConvert.PopulateObject(json, config);
            return config;
        }

        public ConfigurationSettings GetDefault()
        {
            return new ConfigurationSettings
            {
                FieldFormat = DEFAULT_FIELD_FORMAT,
                CautionHeader = CAUTION_HEADER,
                TargetFile = string.Empty,
                Filters = new Filters
                {
                    TypeFilter = new TypeFilter
                    {
                        IsClass = null,
                        BaseType = new string[]{ }
                    },
                    MethodFilter = new MethodFilter
                    {
                        ReturnType = new string[] { }
                    }
                }
            };
        }

        public async Task<ConfigurationSettings> LoadConfigurationAsync()
        {
            string filePath = Path.Combine(Directory.GetCurrentDirectory(), JSON_CONFIG_FILE);
            try
            {
                return await Task.Run(()=> Create(File.ReadAllText(filePath)));
            }
            catch(Exception e)
            {
                this.AddExceptionError($"Une erreur est survenue au chargement du fichier de configuration {filePath}", e);
                return GetDefault();
            }
        }
    }
}
